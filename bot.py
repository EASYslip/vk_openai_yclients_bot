print("–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
import openai
import os
import requests
import threading
from flask import Flask

# –°–æ–∑–¥–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ .env
VK_API_TOKEN = os.getenv("VK_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ VK API
def check_vk_token():
    url = "https://api.vk.com/method/users.get"
    params = {
        "access_token": VK_API_TOKEN,
        "v": "5.131"
    }
    response = requests.get(url, params=params).json()
    
    if "error" in response:
        print(f"–û—à–∏–±–∫–∞ VK API: {response['error']['error_msg']}")
        return False
    print("‚úÖ VK API —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—á–∏–π!")
    return True

if not check_vk_token():
    exit()  # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK API
vk_session = vk_api.VkApi(token=VK_API_TOKEN)
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ LongPoll
vk_session.http.get("https://api.vk.com/method/messages.getLongPollServer", params={"access_token": VK_API_TOKEN, "v": "5.131"})

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OpenAI
openai.api_key = OPENAI_API_KEY

# –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å ChatGPT
def chat_with_gpt(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞."

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –í–ö
def send_message(user_id, text):
    try:
        vk.messages.send(user_id=user_id, message=text, random_id=0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π VK
def listen_vk():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    longpoll.update_longpoll_server()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º LongPoll
    
    for event in longpoll.listen():
        print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event}")  # –õ–æ–≥ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π

        if event.type == VkEventType.MESSAGE_NEW and event.to_me:
            user_message = event.text
            print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.user_id}: {user_message}")  # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª–∏

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
            response = chat_with_gpt(user_message)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            send_message(event.user_id, response)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è VK
threading.Thread(target=listen_vk, daemon=True).start()

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
