import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
import openai
import os
from flask import Flask

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
VK_API_TOKEN = os.getenv("VK_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK API
vk_session = vk_api.VkApi(token=VK_API_TOKEN)
vk = vk_session.get_api()
longpoll = VkLongPoll(vk_session)

# üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OpenAI
openai.api_key = OPENAI_API_KEY

# üîπ –°–æ–∑–¥–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å ChatGPT
def chat_with_gpt(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞."

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
def send_message(user_id, text):
    try:
        vk.messages.send(user_id=user_id, message=text, random_id=0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# üîπ –ü–æ—Ç–æ–∫ –¥–ª—è VK LongPoll
import threading

def listen_vk():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me:
            user_message = event.text
            user_id = event.user_id

            print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
            response = chat_with_gpt(user_message)
            print(f"üí¨ –û—Ç–≤–µ—Ç OpenAI: {response}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            send_message(user_id, response)

# üîπ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è VK
threading.Thread(target=listen_vk, daemon=True).start()

# üîπ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
